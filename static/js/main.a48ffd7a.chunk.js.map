{"version":3,"sources":["features/ingredients/AddIngredient.module.css","features/helpers/Grid.module.css","features/recipes/Recipes.module.css","features/ingredients/ingredientsSlice.js","features/ingredients/AddIngredient.js","features/ingredients/Ingredient.js","features/ingredients/Ingredients.js","api/fridge-api.js","features/recipes/recipesSlice.js","features/recipes/Recipe.js","features/helpers/Loading.js","features/recipes/FetchRecipes.js","features/recipes/FetchMoreRecipes.js","features/helpers/Grid.js","features/recipes/Recipes.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","ingredientsSlice","createSlice","name","initialState","ingredients","recipes","reducers","addIngredient","state","action","push","payload","removeIngredient","filter","ing","actions","selectIngredients","AddIngredient","dispatch","useDispatch","useState","newIngredient","setNewIngredient","onSubmit","event","preventDefault","className","styles","form","input","placeholder","value","onChange","e","target","floating","icon","large","waves","Ingredient","props","ingredient","href","onClick","_","Ingredients","useSelector","header","Set","map","fetchMatchingRecipes","params","a","fetch","method","headers","body","JSON","stringify","response","ok","statusText","json","getMatchingRecipes","createAsyncThunk","recipesSlice","status","error","extraReducers","pending","fulfilled","rejected","message","selectRecipes","loadRecipes","selectRecipesStatus","selectRecipesError","Recipe","result","recipe","checkIcon","found_recipe_ingredients","includes","check_icon","content","tags","tag","badge","image","alt","title","Loading","FetchRecipes","buttonFn","text","limit","left","right","button","FetchMoreRecipes","setLimit","Grid","breakpointCols","default","1800","1200","600","grid","columnClassName","column","children","Recipes","moreRecipes","length","container","App","configureStore","reducer","ingredientsReducer","recipesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a48ffd7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddIngredient_form__2YqzL\",\"input\":\"AddIngredient_input__3SGwh\",\"button\":\"AddIngredient_button__FBkAd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__GKRe6\",\"column\":\"Grid_column__1vfGb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"Recipes_badge__1F9yA\",\"check_icon\":\"Recipes_check_icon__3XZ6Y\",\"error\":\"Recipes_error__q_rem\",\"limitLabel\":\"Recipes_limitLabel__2Nh5B\",\"limit\":\"Recipes_limit__IxB_t\",\"limitButton\":\"Recipes_limitButton__34xaS\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const ingredientsSlice = createSlice({\r\n  name: 'ingredients',\r\n  initialState: {\r\n    ingredients: [],\r\n    recipes: [],\r\n  },\r\n  reducers: {\r\n    addIngredient: (state, action) => {\r\n      state.ingredients.push(action.payload);\r\n    },\r\n    removeIngredient: (state, action) => {\r\n      state.ingredients = state.ingredients.filter(ing => ing !== action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addIngredient, removeIngredient } = ingredientsSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectIngredients = state => state.ingredients.ingredients;\r\n\r\nexport default ingredientsSlice.reducer;\r\n","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {addIngredient} from './ingredientsSlice';\nimport styles from './AddIngredient.module.css';\nimport {Icon, Button} from 'react-materialize';\n\nexport function AddIngredient() {\n  const dispatch = useDispatch();\n  const [newIngredient,\n    setNewIngredient] = useState(\"\");\n  const submitNewIngredient = (event) => {\n    event.preventDefault();\n    if (newIngredient === '') {\n      return false;\n    }\n    dispatch(addIngredient(newIngredient));\n    setNewIngredient(\"\");\n    return false;\n  }\n\n  return (\n    <form onSubmit={submitNewIngredient}>\n      <div className={\"valign-wrapper center \" + styles.form}>\n        <input\n          className={styles.input}\n          placeholder=\"Ajouter un ingrÃ©dient dans mon frigo\"\n          value={newIngredient}\n          onChange={e => setNewIngredient(e.target.value)}/>\n        <Button\n          floating\n          icon={<Icon>send</Icon>}\n          large\n          className=\"green\"\n          waves=\"light\"/>\n      </div>\n    </form>\n  );\n}\n","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {removeIngredient} from './ingredientsSlice';\nimport {Icon} from 'react-materialize';\n\nexport function Ingredient(props) {\n  const ingredient = props.ingredient;\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      {ingredient}\n      <a\n        href=\"#!\"\n        className=\"secondary-content red-text text-darken-3\"\n        onClick={_ => dispatch(removeIngredient(ingredient))}>\n        <Icon>delete</Icon>\n      </a>\n    </div>\n  );\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {selectIngredients} from './ingredientsSlice';\r\nimport {AddIngredient} from './AddIngredient';\r\nimport {Ingredient} from './Ingredient';\r\nimport {Collection, CollectionItem} from 'react-materialize';\r\n\r\nexport function Ingredients() {\r\n  const ingredients = useSelector(selectIngredients);\r\n\r\n  return (\r\n    <Collection header=\"IngrÃ©dients dans mon frigo\">\r\n      {[...new Set(ingredients)].map(ingredient => <CollectionItem key={ingredient}><Ingredient ingredient={ingredient}/></CollectionItem>)}\r\n      <CollectionItem>\r\n        <AddIngredient/>\r\n      </CollectionItem>\r\n    </Collection>\r\n  );\r\n}\r\n","const API_URL = \"https://jf-fridge-api.herokuapp.com\"\n\nexport const fetchMatchingRecipes = async(params) => {\n  const response = await fetch(`${API_URL}/matching_recipes`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(params)\n  });\n  if (!response.ok) {\n    throw response.statusText;  \n  }\n  return response.json();\n};\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\nimport {fetchMatchingRecipes} from '../../api/fridge-api';\n\nconst initialState = {\n  recipes: [],\n  status: 'idle',\n  error: null\n}\n\nexport const getMatchingRecipes = createAsyncThunk('recipes/getMatchingRecipes', fetchMatchingRecipes);\n\nexport const recipesSlice = createSlice({\n  name: 'recipes',\n  initialState,\n  extraReducers: {\n    [getMatchingRecipes.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [getMatchingRecipes.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.recipes = action.payload;\n    },\n    [getMatchingRecipes.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.recipes = [];\n      state.error = action.error.message;\n    }\n  }\n});\n\nexport const {\n  loadRecipes\n} = recipesSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead\n// of in the slice file. For example: `useSelector((state) =>\n// state.counter.value)`\nexport const selectRecipes = state => state.recipes.recipes;\nexport const selectRecipesStatus = state => state.recipes.status;\nexport const selectRecipesError = state => state.recipes.error;\n\nexport default recipesSlice.reducer;\n","import React from 'react';\nimport styles from './Recipes.module.css';\nimport {Card, CardTitle, Icon} from 'react-materialize';\n\nexport function Recipe(props) {\n  const result = props.result;\n  const recipe = result.recipe;\n  const checkIcon = (ingredient) => {\n    if (result.found_recipe_ingredients.includes(ingredient)) {\n      return <span>&nbsp;<Icon className={\"green-text \" + styles.check_icon}>check</Icon>\n      </span>\n    } else {\n      return \"\";\n    }\n  }\n  const content = <div>\n    <ul>{recipe\n        .ingredients\n        .map((ingredient) => <li key={ingredient}>\n          {ingredient}\n          {checkIcon(ingredient)}\n        </li>)}</ul>\n    <p>{recipe\n        .tags\n        .map(tag => <span className={styles.badge} key={tag}>{tag}</span>)}</p>\n  </div>\n\n  let image = null;\n  if (recipe.image) {\n    image = <CardTitle image={recipe.image} alt={recipe.name}></CardTitle>\n  }\n\n  return (\n    <Card title={recipe.name} header={image}>\n      {content}\n    </Card>\n  );\n\n}\n","import React from 'react';\n\nexport function Loading(props) {\n  return (\n    <div className=\"preloader-wrapper big active\">\n      <div className=\"spinner-layer spinner-blue-only\">\n        <div className=\"circle-clipper left\">\n          <div className=\"circle\"></div>\n        </div>\n        <div className=\"gap-patch\">\n          <div className=\"circle\"></div>\n        </div>\n        <div className=\"circle-clipper right\">\n          <div className=\"circle\"></div>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useSelector} from 'react-redux';\nimport {selectIngredients} from '../ingredients/ingredientsSlice';\nimport {getMatchingRecipes, selectRecipesStatus, selectRecipesError} from './recipesSlice';\nimport styles from './Recipes.module.css';\nimport {Loading} from '../helpers/Loading';\nimport {Icon, Button} from 'react-materialize';\n\nexport function FetchRecipes() {\n  const ingredients = useSelector(selectIngredients);\n  const status = useSelector(selectRecipesStatus);\n  const error = useSelector(selectRecipesError);\n  const dispatch = useDispatch();\n\n  const buttonFn = (text) => <div>\n    <Button\n      waves=\"light\"\n      large\n      className=\"green\"\n      onClick={_ => dispatch(getMatchingRecipes({ingredients, limit: 10}))}>\n      <Icon left>restaurant</Icon>\n      {text}\n      <Icon right>search</Icon>\n    </Button>\n  </div>\n  let button = buttonFn(\"Que puis-je faire ?\");\n\n  if (status === 'loading') {\n    button = <Loading/>\n  } else if (status === 'failed') {\n    button = <div>\n      <div className={\"red darken-4 white-text \" + styles.error}>{error}</div>\n      {buttonFn(\"RÃ©Ã©ssayer ?\")}\n    </div>\n  }\n\n  return button;\n}\n","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useSelector} from 'react-redux';\nimport {selectIngredients} from '../ingredients/ingredientsSlice';\nimport {getMatchingRecipes, selectRecipesStatus, selectRecipesError} from './recipesSlice';\nimport styles from './Recipes.module.css';\nimport {Loading} from '../helpers/Loading';\nimport {Icon, Button} from 'react-materialize';\n\nexport function FetchMoreRecipes() {\n  const ingredients = useSelector(selectIngredients);\n  const status = useSelector(selectRecipesStatus);\n  const error = useSelector(selectRecipesError);\n  const [limit,\n    setLimit] = useState(20);\n  const dispatch = useDispatch();\n  const onClick = () => {\n    setLimit(limit + 10);\n    dispatch(getMatchingRecipes({ingredients, limit}))\n  }\n\n  const buttonFn = (text) => <div>\n    <Button\n      waves=\"light\"\n      large\n      className=\"green\"\n      onClick={onClick}>\n      <Icon left>restaurant</Icon>\n      {text}\n      <Icon right>search</Icon>\n    </Button>\n  </div>\n  let button = buttonFn(\"Chercher plus de recettes...\");\n\n  if (status === 'loading') {\n    button = <Loading/>\n  } else if (status === 'failed') {\n    button = <div>\n      <div className={\"red darken-4 white-text \" + styles.error}>{error}</div>\n      {buttonFn(\"RÃ©Ã©ssayer ?\")}\n    </div>\n  }\n\n  return button;\n}\n","import React from 'react';\nimport Masonry from 'react-masonry-css'\nimport styles from './Grid.module.css';\n\nexport function Grid(props) {\n  const breakpointColumnsObj = {\n    default: 4,\n    1800: 3,\n    1200: 2,\n    600: 1\n  };\n\n  return <Masonry\n    breakpointCols={breakpointColumnsObj}\n    className={styles.grid}\n    columnClassName={styles.column}>\n    {props.children}\n  </Masonry>\n}","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {selectRecipes} from './recipesSlice';\nimport styles from './Recipes.module.css';\nimport {Recipe} from './Recipe';\nimport {FetchRecipes} from './FetchRecipes';\nimport {FetchMoreRecipes} from './FetchMoreRecipes';\nimport {Grid} from '../helpers/Grid';\n\nexport function Recipes(props) {\n  const recipes = useSelector(selectRecipes);\n\n  const moreRecipes = recipes.length === 0 ? \"\" : <FetchMoreRecipes />;\n\n  return (\n    <div className={styles.container}>\n      <FetchRecipes />\n      <Grid>\n        {recipes.map(result => (<Recipe key={result.recipe.name} result={result}/>))}\n      </Grid>\n      {moreRecipes}\n    </div>\n  );\n}\n","import React from 'react';\r\nimport {Ingredients} from './features/ingredients/Ingredients';\r\nimport {Recipes} from './features/recipes/Recipes';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <Ingredients/>\r\n        <Recipes/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport ingredientsReducer from '../features/ingredients/ingredientsSlice';\r\nimport recipesReducer from '../features/recipes/recipesSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    ingredients: ingredientsReducer,\r\n    recipes: recipesReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}